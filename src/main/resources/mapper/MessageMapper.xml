<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.edu.ncu.chat_server.mapper.MessageMapper" >
  <resultMap id="BaseResultMap" type="cn.edu.ncu.chat_server.entity.Message" >
    <id column="message_id" property="messageId" jdbcType="INTEGER" />
    <result column="sender_id" property="senderId" jdbcType="INTEGER" />
    <result column="receiver_id" property="receiverId" jdbcType="INTEGER" />
    <result column="content" property="content" jdbcType="VARCHAR" />
    <result column="time" property="time" jdbcType="TIMESTAMP" />
    <result column="state" property="state" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    message_id, sender_id, receiver_id, content, time, state
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from chat_message
    where message_id = #{messageId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from chat_message
    where message_id = #{messageId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="cn.edu.ncu.chat_server.entity.Message" >
    insert into chat_message (message_id, sender_id, receiver_id,
      content, time, state
      )
    values (#{messageId,jdbcType=INTEGER}, #{senderId,jdbcType=INTEGER}, #{receiverId,jdbcType=INTEGER},
      #{content,jdbcType=VARCHAR}, #{time,jdbcType=TIMESTAMP}, #{state,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="cn.edu.ncu.chat_server.entity.Message" >
    insert into chat_message
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="messageId != null" >
        message_id,
      </if>
      <if test="senderId != null" >
        sender_id,
      </if>
      <if test="receiverId != null" >
        receiver_id,
      </if>
      <if test="content != null" >
        content,
      </if>
      <if test="time != null" >
        time,
      </if>
      <if test="state != null" >
        state,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="messageId != null" >
        #{messageId,jdbcType=INTEGER},
      </if>
      <if test="senderId != null" >
        #{senderId,jdbcType=INTEGER},
      </if>
      <if test="receiverId != null" >
        #{receiverId,jdbcType=INTEGER},
      </if>
      <if test="content != null" >
        #{content,jdbcType=VARCHAR},
      </if>
      <if test="time != null" >
        #{time,jdbcType=TIMESTAMP},
      </if>
      <if test="state != null" >
        #{state,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="cn.edu.ncu.chat_server.entity.Message" >
    update chat_message
    <set >
      <if test="senderId != null" >
        sender_id = #{senderId,jdbcType=INTEGER},
      </if>
      <if test="receiverId != null" >
        receiver_id = #{receiverId,jdbcType=INTEGER},
      </if>
      <if test="content != null" >
        content = #{content,jdbcType=VARCHAR},
      </if>
      <if test="time != null" >
        time = #{time,jdbcType=TIMESTAMP},
      </if>
      <if test="state != null" >
        state = #{state,jdbcType=INTEGER},
      </if>
    </set>
    where message_id = #{messageId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.edu.ncu.chat_server.entity.Message" >
    update chat_message
    set sender_id = #{senderId,jdbcType=INTEGER},
      receiver_id = #{receiverId,jdbcType=INTEGER},
      content = #{content,jdbcType=VARCHAR},
      time = #{time,jdbcType=TIMESTAMP},
      state = #{state,jdbcType=INTEGER}
    where message_id = #{messageId,jdbcType=INTEGER}
  </update>
  <select id="selectByBothId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select <include refid="Base_Column_List"/>
    from chat_message
    where sender_id = #{idA,jdbcType=INTEGER} and receiver_id = #{idB,jdbcType=INTEGER}
    or sender_id = #{idB,jdbcType=INTEGER} and receiver_id = #{idA,jdbcType=INTEGER}
    order by time desc
  </select>
    <select id="selectByBothIdAndState" parameterType="cn.edu.ncu.chat_server.dto.ReceiveMessageDTO" resultMap="BaseResultMap">
        select  <include refid="Base_Column_List"/>
        from chat_message
        where sender_id = #{me_id,jdbcType=INTEGER} and receiver_id =#{him_id,jdbcType=INTEGER}
        and state = #{state,jdbcType=INTEGER}
        order by time
    </select>
</mapper>